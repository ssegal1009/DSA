public class mergSort {
    /**
     * merge sort - recursively divides array in 2, sorts, and then re combines them
     * O(n log n) - quasilinear time - better than quadratic
     * Space complexity - O(n), worse than bubble, selection, and insertion, which is O(1), because we create new arrays
     * @param args
     */
    public static void main(String[] args) {
        int[] array = {8,2,5,3,4,7,6,1};

        mergeSort(array);

        for(int i : array){
            System.out.print(i + " ");
        }
    }

    private static void mergeSort(int[] array){

        int length = array.length;
        if(length <= 1) return; //base case

        int middle = length /2; //middle of array

        int[] leftArray = new int[middle];
        int[] rightArray = new int[length-middle];


        int i = 0; //for our left array
        int j = 0;//for our right array


        for(; i < length; i++){
            if(i<middle){
                leftArray[i] = array[i];
            } else{
                rightArray[j] = array[i];
                j++;
            }
        }
        mergeSort(leftArray);//recursive case
        mergeSort(rightArray);
        merge(leftArray, rightArray, array);

    }

    private static void merge(int[] leftArray, int[] rightArray, int[] array){

        int leftSize = array.length/2;
        int rightSize = array.length - leftSize;

        int i = 0; //for orig array to keep track of the positio
        int l = 0; //left array
        int r = 0; //right array

        //check conditions for merging

        while(l < leftSize && r < rightSize){
            if(leftArray[l] < rightArray[r]){
                array[i] = leftArray[l];
                i++;
                l++;
            } else{
                array[i] = rightArray[r];
                i++;
                r++;
            }
        }
        while(l < leftSize ){
            array[i] = leftArray[l];
            i++;
            l++;
        }
        while(r<rightSize){
            array[i] = rightArray[r];
            i++;
            r++;
        }



    }
}
